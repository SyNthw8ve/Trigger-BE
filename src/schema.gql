# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Application {
  match: ID
  type: ApplicationType!
  user: ID!
}

enum ApplicationType {
  Manual
  Match
}

type Availability {
  hours: Float
  type: AvailabilityType!
}

input AvailabilityInput {
  hours: Float
  type: AvailabilityType!
}

enum AvailabilityType {
  FullTime
  Hours
  PartTime
}

input CreateHardskillDto {
  name: String!
}

input CreateInstitutionDto {
  creator: ID!
  description: String!
  location: LocaleInput!
  name: String!
  sector: String!
}

input CreateLanguageDto {
  name: String!
}

input CreateProjectDto {
  description: String!
  institution: ID
  location: LocaleInput!
  manager: ID!
  scope: String!
  title: String!
}

input CreateSoftskillDto {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Hardskill {
  name: String!
}

type Institution {
  creator: User!
  description: String!
  location: Locale!
  name: String!
  projects: [Project!]!
  sector: String!
}

type Language {
  name: String!
}

type Locale {
  address: String!
  position: Position!
}

input LocaleInput {
  address: String!
  position: PositionInput!
}

type Mutation {
  newInstitution(institution: CreateInstitutionDto!): Institution!
  newLanguage(language: CreateLanguageDto!): Language!
  newProject(project: CreateProjectDto!): Project!
  newSoftskill(softskill: CreateSoftskillDto!): Softskill!
  newUser(user: RegisterUserDto!): User!
  registerHardSkill(skill: CreateHardskillDto!): Hardskill!
  registerMutlipleHardSkills(skills: [CreateHardskillDto!]!): [Hardskill!]!
  updateUser(user: UpdateUserDto!): User!
}

type Phase {
  endDate: DateTime!
  participations: [ID!]!
  startDate: DateTime!
}

type Position {
  latitude: Float!
  longitude: Float!
}

input PositionInput {
  latitude: Float!
  longitude: Float!
}

type Project {
  admins: [User!]!
  aliases: [String!]!
  currentTeam: [User!]!
  description: String!
  highlighted: Boolean!
  institution: Institution
  location: Locale
  manager: User!
  phases: [Phase!]!
  scope: String!
  status: ProjectStatus!
  title: String!
}

enum ProjectStatus {
  Closed
  Open
}

type Query {
  getHardSkills: [Hardskill!]!
  getInstitutions: [Institution!]!
  getLanguages: [Language!]!
  getProject(id: String!): Project!
  getSoftskills: [Softskill!]!
  getUsers: [User!]!
}

input RegisterUserDto {
  availability: AvailabilityInput
  email: String!
  hardSkills: [ID!]
  interests: [String!]
  languages: [ID!]
  name: String!
  password: String!
  softSkills: [ID!]
}

type Softskill {
  name: String!
}

type Task {
  description: String!
  title: String!
}

input UpdateUserDto {
  availability: AvailabilityInput
  email: String!
  hardSkills: [ID!]
  id: ID!
  interests: [String!]
  languages: [ID!]
  name: String!
  password: String!
  softSkills: [ID!]
}

type User {
  availability: Availability
  email: String!
  hardSkills: [Hardskill!]!
  institution: Institution
  interests: [String!]!
  languages: [Language!]!
  name: String!
  password: String!
  projects: [Project!]!
  softSkills: [UserSoftskill!]!
}

type UserSoftskill {
  score: Float!
  softskillId: Softskill!
  visible: Boolean!
}
